shiny::runApp()
runApp()
faithful
view(faithfull)
view(faithful)
head(faithfull)
runApp()
data(drosophilia)
data(drosophilia)
droso<-data(drosophilia)
droso<-data(drosophilia)
install.packages(ARTIVA)
install.packages("ARTIVA")
library(ARTIVA)
library(ARTIVA)
droso<-data(drosophilia)
library(ARTIVA)
library("ARTIVA")
drosophila
droso<-drosophila
View(droso)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$loinorm <- renderPlot({
# generate bins based on input$bins from ui.R
hist(rnorm(input$Nb))
})
}
library(shiny)
ui <- fluidPage(
titlePanel("TD enculage de mouches"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("Nb",
"Nombre de valeurs :",
min = 1,
max = 200,
value = 30),
# Show a plot of the generated distribution
mainPanel(
plotOutput("loinorm"),
)
)
))
# Define server logic required to draw a histogram
server <- function(input, output) {
output$loinorm <- renderPlot({
# generate bins based on input$bins from ui.R
hist(rnorm(input$Nb))
})
}
# Run the application
shinyApp(ui = ui, server = server)
hist(rnorm(input$Nb))
hist(rnorm(30))
shiny::runApp()
runApp()
output$espece<-renderTable({
base[,1]
})
runApp()
runApp()
base<-read.csv("base.csv",header=TRUE,)
base<-read.table("base.csv",header=TRUE,)
base<-read.table("base.csv",header=TRUE,sep = ";")
base[,1]
base<-read.table("base.csv",header=TRUE,sep = ";")
base[,1]
base<-read.table("base.csv",header=TRUE,sep = ";")
base[,1]
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
library(shiny)
library(FactoMineR)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
})
paste("Le nombre de mouches avec les yeux bleus dans la population est de :", round(runif(1,0,1)*input$Nb)," mouches")
})
paste("Le nombre de mouches avec les yeux bleus dans la population est de :", round(runif(1,0,1)*10)," mouches")
paste("Le nombre de mouches avec les yeux bleus dans la population est de :", round(runif(1,0,1)*10)," mouches")
})
paste("Le nombre de mouches avec les yeux bleus dans la population est de :", round(runif(1,0,1)*10)," mouches")
round(runif(1,0,1)*10)
round(runif(1,0,1)*10)
paste("Le nombre de mouches avec les yeux bleus dans la population est de :",round(runif(1,0,1)*10) ," mouches")
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "rapport.Rmd")
file.copy("rapport.Rmd", "tempReport", overwrite = TRUE);
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "rapport.Rmd");
runApp()
runApp()
server <- function(input, output) {
base<-read.table("base.csv",header=TRUE,sep = ";",encoding = "UTF8")
output$title_panel <- renderText({
paste0("Suivi d'un élevage de ", input$espece )
})
output$loinorm <- renderPlot({
if(input$espece=="Drosophile payetum"){poids_moyen<-0.1;croissance<-0.05;sd<-0.01}else if
(input$espece=="Tabanus savetus"){poids_moyen<-1;croissance<-0.2;sd<-0.3}else if
(input$espece=="Lucilia bertelettus"){poids_moyen<-0.8;croissance<-0.15;sd<-0.04}else if
(input$espece=="Syrphus billitus"){poids_moyen<-0.5;croissance<-0.1;sd<-0.025}else if
(input$espece=="Eristale bonumgirus"){poids_moyen<-0.7;croissance<-0.3;sd<-0.03}
if(input$stress == 1){poids_moyen <- poids_moyen*0.1 } else if
(input$stress == 2){poids_moyen <- poids_moyen*0.115 } else if
(input$stress == 3){poids_moyen <- poids_moyen*0.12 } else if
(input$stress == 4){poids_moyen <- poids_moyen*0.125 } else if
(input$stress == 5){poids_moyen <- poids_moyen*0.13 } else if
(input$stress == 6){poids_moyen <- poids_moyen*0.110 } else if
(input$stress == 7){poids_moyen <- poids_moyen*0.05 }
hist(rnorm(input$Nb,mean=poids_moyen+input$jour*croissance,sd=sd),
main = paste("Répartition des poids de l'élevage au jour",input$jour,", avec un niveau de stress",input$stress),
col="grey", xlab = "Poids en mg ", ylab = "Nb d'individu par tranche de poids ")
})
output$poids<-renderText({
if(input$espece=="Drosophile payetum"){poids_moyen<-0.1;croissance<-0.05;sd<-0.01}else if
(input$espece=="Tabanus savetus"){poids_moyen<-1;croissance<-0.7;sd<-0.3}else if
(input$espece=="Lucilia bertelettus"){poids_moyen<-0.8;croissance<-0.5;sd<-0.04}else if
(input$espece=="Syrphus billitus"){poids_moyen<-0.5;croissance<-0.1;sd<-0.025}else if
(input$espece=="Eristale bonumgirus"){poids_moyen<-0.7;croissance<-0.6;sd<-0.03}
paste("Le poids potentiellement atteignable (une fois les ailes retirées) de l'elevage est :", (poids_moyen+input$jour*croissance*input$Nb)/1000," g")
})
output$nous <- renderText({
"Groupe 3"
})
output$espece <- renderPlot({
if(input$espece == "Drosophile payetum"){femelle <- 48; male <- 52 } else if
(input$espece == "Tabanus savetus"){femelle <- 37; male <- 63 } else if
(input$espece == "Lucilia bertelettus"){femelle <- 55; male <- 45 } else if
(input$espece == "Syrphus billitus"){femelle <- 53; male <- 47 } else if
(input$espece == "Eristale bonumgirus"){femelle <- 60; male <- 40 }
pie(c(male,femelle), col=c("#AAFFAA","#FFAAAA"),labels=c(paste("Male",male,"%"), paste("Femelle",femelle,"%")), main="Repartition male / femelle",cex=1.5)
})
output$nbyb<-renderText({
paste("Le nombre de mouches avec les yeux bleus dans la population est de :", round(runif(1,0,1)*input$Nb)," mouches")
})
output$report <- downloadHandler({
# For PDF output, change this to "report.pdf"
filename = "rapport.html"
content = function(file)
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
#tempReport <- file.path(tempdir(), "rapport.Rmd")
#file.copy("rapport.Rmd", "tempReport.rmd", overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list(s = input$espece, j=input$jour,pop=input$Nb, poids=input$poids_moyen)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render("rapport.Rmd", output_file = content,
params = params,
envir = new.env(parent = globalenv())
)
})
}
content = function(file)
server <- function(input, output) {
base<-read.table("base.csv",header=TRUE,sep = ";",encoding = "UTF8")
output$title_panel <- renderText({
paste0("Suivi d'un élevage de ", input$espece )
})
output$loinorm <- renderPlot({
if(input$espece=="Drosophile payetum"){poids_moyen<-0.1;croissance<-0.05;sd<-0.01}else if
(input$espece=="Tabanus savetus"){poids_moyen<-1;croissance<-0.2;sd<-0.3}else if
(input$espece=="Lucilia bertelettus"){poids_moyen<-0.8;croissance<-0.15;sd<-0.04}else if
(input$espece=="Syrphus billitus"){poids_moyen<-0.5;croissance<-0.1;sd<-0.025}else if
(input$espece=="Eristale bonumgirus"){poids_moyen<-0.7;croissance<-0.3;sd<-0.03}
if(input$stress == 1){poids_moyen <- poids_moyen*0.1 } else if
(input$stress == 2){poids_moyen <- poids_moyen*0.115 } else if
(input$stress == 3){poids_moyen <- poids_moyen*0.12 } else if
(input$stress == 4){poids_moyen <- poids_moyen*0.125 } else if
(input$stress == 5){poids_moyen <- poids_moyen*0.13 } else if
(input$stress == 6){poids_moyen <- poids_moyen*0.110 } else if
(input$stress == 7){poids_moyen <- poids_moyen*0.05 }
hist(rnorm(input$Nb,mean=poids_moyen+input$jour*croissance,sd=sd),
main = paste("Répartition des poids de l'élevage au jour",input$jour,", avec un niveau de stress",input$stress),
col="grey", xlab = "Poids en mg ", ylab = "Nb d'individu par tranche de poids ")
})
output$poids<-renderText({
if(input$espece=="Drosophile payetum"){poids_moyen<-0.1;croissance<-0.05;sd<-0.01}else if
(input$espece=="Tabanus savetus"){poids_moyen<-1;croissance<-0.7;sd<-0.3}else if
(input$espece=="Lucilia bertelettus"){poids_moyen<-0.8;croissance<-0.5;sd<-0.04}else if
(input$espece=="Syrphus billitus"){poids_moyen<-0.5;croissance<-0.1;sd<-0.025}else if
(input$espece=="Eristale bonumgirus"){poids_moyen<-0.7;croissance<-0.6;sd<-0.03}
paste("Le poids potentiellement atteignable (une fois les ailes retirées) de l'elevage est :", (poids_moyen+input$jour*croissance*input$Nb)/1000," g")
})
output$nous <- renderText({
"Groupe 3"
})
output$espece <- renderPlot({
if(input$espece == "Drosophile payetum"){femelle <- 48; male <- 52 } else if
(input$espece == "Tabanus savetus"){femelle <- 37; male <- 63 } else if
(input$espece == "Lucilia bertelettus"){femelle <- 55; male <- 45 } else if
(input$espece == "Syrphus billitus"){femelle <- 53; male <- 47 } else if
(input$espece == "Eristale bonumgirus"){femelle <- 60; male <- 40 }
pie(c(male,femelle), col=c("#AAFFAA","#FFAAAA"),labels=c(paste("Male",male,"%"), paste("Femelle",femelle,"%")), main="Repartition male / femelle",cex=1.5)
})
output$nbyb<-renderText({
paste("Le nombre de mouches avec les yeux bleus dans la population est de :", round(runif(1,0,1)*input$Nb)," mouches")
})
output$report <- downloadHandler({
# For PDF output, change this to "report.pdf"
filename = "rapport.html"
content = function(file)
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
#tempReport <- file.path(tempdir(), "rapport.Rmd")
#file.copy("rapport.Rmd", "tempReport.rmd", overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list(s = input$espece, j=input$jour,pop=input$Nb, poids=input$poids_moyen)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render("rapport.Rmd", output_file = content,
params = params,
envir = new.env(parent = globalenv())
)
})
}
content = function(file)
View(server)
params <- list(s = input$espece, j=input$jour,pop=input$Nb, poids=input$poids_moyen)
filename = "rapport.html"
server <- function(input, output) {
base<-read.table("base.csv",header=TRUE,sep = ";",encoding = "UTF8")
output$title_panel <- renderText({
paste0("Suivi d'un élevage de ", input$espece )
})
output$loinorm <- renderPlot({
if(input$espece=="Drosophile payetum"){poids_moyen<-0.1;croissance<-0.05;sd<-0.01}else if
(input$espece=="Tabanus savetus"){poids_moyen<-1;croissance<-0.2;sd<-0.3}else if
(input$espece=="Lucilia bertelettus"){poids_moyen<-0.8;croissance<-0.15;sd<-0.04}else if
(input$espece=="Syrphus billitus"){poids_moyen<-0.5;croissance<-0.1;sd<-0.025}else if
(input$espece=="Eristale bonumgirus"){poids_moyen<-0.7;croissance<-0.3;sd<-0.03}
if(input$stress == 1){poids_moyen <- poids_moyen*0.1 } else if
(input$stress == 2){poids_moyen <- poids_moyen*0.115 } else if
(input$stress == 3){poids_moyen <- poids_moyen*0.12 } else if
(input$stress == 4){poids_moyen <- poids_moyen*0.125 } else if
(input$stress == 5){poids_moyen <- poids_moyen*0.13 } else if
(input$stress == 6){poids_moyen <- poids_moyen*0.110 } else if
(input$stress == 7){poids_moyen <- poids_moyen*0.05 }
hist(rnorm(input$Nb,mean=poids_moyen+input$jour*croissance,sd=sd),
main = paste("Répartition des poids de l'élevage au jour",input$jour,", avec un niveau de stress",input$stress),
col="grey", xlab = "Poids en mg ", ylab = "Nb d'individu par tranche de poids ")
})
output$poids<-renderText({
if(input$espece=="Drosophile payetum"){poids_moyen<-0.1;croissance<-0.05;sd<-0.01}else if
(input$espece=="Tabanus savetus"){poids_moyen<-1;croissance<-0.7;sd<-0.3}else if
(input$espece=="Lucilia bertelettus"){poids_moyen<-0.8;croissance<-0.5;sd<-0.04}else if
(input$espece=="Syrphus billitus"){poids_moyen<-0.5;croissance<-0.1;sd<-0.025}else if
(input$espece=="Eristale bonumgirus"){poids_moyen<-0.7;croissance<-0.6;sd<-0.03}
paste("Le poids potentiellement atteignable (une fois les ailes retirées) de l'elevage est :", (poids_moyen+input$jour*croissance*input$Nb)/1000," g")
})
output$nous <- renderText({
"Groupe 3"
})
output$espece <- renderPlot({
if(input$espece == "Drosophile payetum"){femelle <- 48; male <- 52 } else if
(input$espece == "Tabanus savetus"){femelle <- 37; male <- 63 } else if
(input$espece == "Lucilia bertelettus"){femelle <- 55; male <- 45 } else if
(input$espece == "Syrphus billitus"){femelle <- 53; male <- 47 } else if
(input$espece == "Eristale bonumgirus"){femelle <- 60; male <- 40 }
pie(c(male,femelle), col=c("#AAFFAA","#FFAAAA"),labels=c(paste("Male",male,"%"), paste("Femelle",femelle,"%")), main="Repartition male / femelle",cex=1.5)
})
output$nbyb<-renderText({
paste("Le nombre de mouches avec les yeux bleus dans la population est de :", round(runif(1,0,1)*input$Nb)," mouches")
})
output$report <- downloadHandler({
# For PDF output, change this to "report.pdf"
filename = "rapport.html"
content = function(file)
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
#tempReport <- file.path(tempdir(), "rapport.Rmd")
#file.copy("rapport.Rmd", "tempReport.rmd", overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list(s = input$espece, j=input$jour,pop=input$Nb, poids=input$poids_moyen)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render("rapport.Rmd", output_file = content,
params = params,
envir = new.env(parent = globalenv())
)
})
}
# For PDF output, change this to "report.pdf"
filename = "rapport.html"
server <- function(input, output) {
base<-read.table("base.csv",header=TRUE,sep = ";",encoding = "UTF8")
output$title_panel <- renderText({
paste0("Suivi d'un élevage de ", input$espece )
})
output$loinorm <- renderPlot({
if(input$espece=="Drosophile payetum"){poids_moyen<-0.1;croissance<-0.05;sd<-0.01}else if
(input$espece=="Tabanus savetus"){poids_moyen<-1;croissance<-0.2;sd<-0.3}else if
(input$espece=="Lucilia bertelettus"){poids_moyen<-0.8;croissance<-0.15;sd<-0.04}else if
(input$espece=="Syrphus billitus"){poids_moyen<-0.5;croissance<-0.1;sd<-0.025}else if
(input$espece=="Eristale bonumgirus"){poids_moyen<-0.7;croissance<-0.3;sd<-0.03}
if(input$stress == 1){poids_moyen <- poids_moyen*0.1 } else if
(input$stress == 2){poids_moyen <- poids_moyen*0.115 } else if
(input$stress == 3){poids_moyen <- poids_moyen*0.12 } else if
(input$stress == 4){poids_moyen <- poids_moyen*0.125 } else if
(input$stress == 5){poids_moyen <- poids_moyen*0.13 } else if
(input$stress == 6){poids_moyen <- poids_moyen*0.110 } else if
(input$stress == 7){poids_moyen <- poids_moyen*0.05 }
hist(rnorm(input$Nb,mean=poids_moyen+input$jour*croissance,sd=sd),
main = paste("Répartition des poids de l'élevage au jour",input$jour,", avec un niveau de stress",input$stress),
col="grey", xlab = "Poids en mg ", ylab = "Nb d'individu par tranche de poids ")
})
output$poids<-renderText({
if(input$espece=="Drosophile payetum"){poids_moyen<-0.1;croissance<-0.05;sd<-0.01}else if
(input$espece=="Tabanus savetus"){poids_moyen<-1;croissance<-0.7;sd<-0.3}else if
(input$espece=="Lucilia bertelettus"){poids_moyen<-0.8;croissance<-0.5;sd<-0.04}else if
(input$espece=="Syrphus billitus"){poids_moyen<-0.5;croissance<-0.1;sd<-0.025}else if
(input$espece=="Eristale bonumgirus"){poids_moyen<-0.7;croissance<-0.6;sd<-0.03}
paste("Le poids potentiellement atteignable (une fois les ailes retirées) de l'elevage est :", (poids_moyen+input$jour*croissance*input$Nb)/1000," g")
})
output$nous <- renderText({
"Groupe 3"
})
output$espece <- renderPlot({
if(input$espece == "Drosophile payetum"){femelle <- 48; male <- 52 } else if
(input$espece == "Tabanus savetus"){femelle <- 37; male <- 63 } else if
(input$espece == "Lucilia bertelettus"){femelle <- 55; male <- 45 } else if
(input$espece == "Syrphus billitus"){femelle <- 53; male <- 47 } else if
(input$espece == "Eristale bonumgirus"){femelle <- 60; male <- 40 }
pie(c(male,femelle), col=c("#AAFFAA","#FFAAAA"),labels=c(paste("Male",male,"%"), paste("Femelle",femelle,"%")), main="Repartition male / femelle",cex=1.5)
})
output$nbyb<-renderText({
paste("Le nombre de mouches avec les yeux bleus dans la population est de :", round(runif(1,0,1)*input$Nb)," mouches")
})
output$report <- downloadHandler({
# For PDF output, change this to "report.pdf"
filename = "rapport.html"
content = function(file)
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
#tempReport <- file.path(tempdir(), "rapport.Rmd")
#file.copy("rapport.Rmd", "tempReport.rmd", overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list(s = input$espece, j=input$jour,pop=input$Nb, poids=input$poids_moyen)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render("rapport.Rmd", output_file = content,
params = params,
envir = new.env(parent = globalenv())
)
})
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
knit_with_parameters('~/github/Elevage/elevage/report.Rmd', encoding = 'UTF-8')
knit_with_parameters('~/github/Elevage/elevage/report.Rmd', encoding = 'UTF-8')
knit_with_parameters('~/github/Elevage/elevage/report.Rmd', encoding = 'UTF-8')
runApp()
knit_with_parameters('~/github/Elevage/elevage/report.Rmd', encoding = 'UTF-8')
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a<-"nom"
a<-"nom";
a
a
a<-nom
a<-"nom"
paste0(a,"moi")
paste0(a," moi")
HTML('<img src=paste0(a," moi")/>')
HTML('<img src=a/>')
HTML('<img src="a"/>')
HTML('<img src=+a+/>')
HTML('<img src=+"a"+/>')
HTML('<img src='+a+'/>')
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
if(s == "Drosophile payetum"){femelle <- 48; male <- 52 } else if
(s == "Tabanus savetus"){femelle <- 37; male <- 63 } else if
(s == "Lucilia bertelettus"){femelle <- 55; male <- 45 } else if
(s == "Syrphus billitus"){femelle <- 53; male <- 47 } else if
(s == "Eristale bonumgirus"){femelle <- 60; male <- 40 }
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
